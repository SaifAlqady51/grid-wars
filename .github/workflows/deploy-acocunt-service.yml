name: Deploy Account Service to EC2
on:
  push:
    branches: ["*"]
    paths:
      - "apps/backend/services/account-service/**"
  pull_request:
    branches: ["*"]
    paths:
      - "apps/backend/services/account-service/**"

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: "apps/backend/services/account-service/package-lock.json"

      - name: Install dependencies
        working-directory: ./apps/backend/services/account-service
        run: npm ci

      - name: Build application with package files (skip env copy)
        working-directory: ./apps/backend/services/account-service
        run: npm run build && npm run copy-package

      - name: Debug - Check secrets availability
        run: |
          echo "Checking secret availability..."
          echo "EC2_HOST exists: ${{ secrets.EC2_HOST != '' }}"
          echo "EC2_USERNAME exists: ${{ secrets.EC2_USERNAME != '' }}"
          echo "EC2_SSH_KEY exists: ${{ secrets.EC2_SSH_KEY != '' }}"
          echo "EC2_HOST value: '${{ secrets.EC2_HOST }}'"
          echo "EC2_USERNAME value: '${{ secrets.EC2_USERNAME }}'"
          echo "EC2_SSH_KEY length: ${{ length(secrets.EC2_SSH_KEY) }}"

      - name: Validate required secrets
        run: |
          if [ -z "$EC2_HOST" ]; then
            echo "Error: EC2_HOST secret is empty or not accessible"
            echo "Available environment variables:"
            env | grep -E "(GITHUB|RUNNER)" | head -10
            exit 1
          fi
          if [ -z "$EC2_USERNAME" ]; then
            echo "Error: EC2_USERNAME secret is empty or not accessible"
            exit 1
          fi
          if [ -z "$EC2_SSH_KEY" ]; then
            echo "Error: EC2_SSH_KEY secret is empty or not accessible"
            exit 1
          fi
          echo "All required secrets are accessible"
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        env:
          HOST: ${{ secrets.EC2_HOST }}
          USERNAME: ${{ secrets.EC2_USERNAME }}
          KEY: ${{ secrets.EC2_SSH_KEY }}
        with:
          host: ${{ env.HOST }}
          username: ${{ env.USERNAME }}
          key: ${{ env.KEY }}
          port: 22
          timeout: 60s
          command_timeout: 10m
          script: |
            # Navigate to app directory
            cd ~/grid-wars-account-service

            # Pull latest code
            git pull origin main

            # Navigate to the specific service
            cd apps/backend/services/account-service

            # Install/update dependencies
            npm ci

            # Build the application with package files (skip env copy for now)
            npm run build && npm run copy-package

            # Install PM2 locally if not exists
            if ! command -v npx pm2 &> /dev/null; then
              npm install --save-dev pm2
            fi

            # Stop existing PM2 process (if running)
            npx pm2 stop grid-wars-account-service || true
            npx pm2 delete grid-wars-account-service || true

            # Create/update environment file in dist folder
            echo "DB_HOST=${{ secrets.DB_HOST }}" > dist/.env
            echo "DB_PORT=${{ secrets.DB_PORT }}" >> dist/.env
            echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> dist/.env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> dist/.env
            echo "DB_NAME=${{ secrets.DB_NAME }}" >> dist/.env
            echo "DB_SYNCHRONIZE=false" >> dist/.env
            echo "NODE_ENV=production" >> dist/.env
            echo "PORT=3001" >> dist/.env
            echo "ACCESS_TOKEN_SECURITY_KEY=${{ secrets.ACCESS_TOKEN_SECURITY_KEY }}" >> dist/.env
            echo "ACCESS_TOKEN_SECRET=${{ secrets.ACCESS_TOKEN_SECRET }}" >> dist/.env
            echo "ACCESS_TOKEN_EXPIRATION=7d" >> dist/.env

            # Start the application with PM2 (from dist folder)
            npx pm2 start dist/main.js --name "grid-wars-account-service"

            # Save PM2 configuration
            npx pm2 save

            # Setup PM2 to start on system boot (run once)
            npx pm2 startup || true

            # Show PM2 status
            npx pm2 list

            # Wait a moment for the app to start
            sleep 5

            # Health check (port should match your app's port - you have PORT=3001 but checking 3000)
            curl -f http://localhost:3001/health || echo "Health check failed, but deployment completed"
