name: Deploy Account Service to EC2
on:
  push:
    branches: ["*"]
    paths:
      - "apps/backend/services/account-service/**"
      - "packages/jwt/**"
  pull_request:
    branches: ["*"]
    paths:
      - "apps/backend/services/account-service/**"
      - "packages/jwt/**"

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: secrets
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "24"
          cache: "npm"
          cache-dependency-path: |
            apps/backend/services/account-service/package-lock.json
            packages/jwt/package-lock.json

      - name: Install root dependencies
        run: npm ci

      - name: Install JWT package dependencies
        working-directory: ./packages/jwt
        run: npm ci

      - name: Install account service dependencies
        working-directory: ./apps/backend/services/account-service
        run: npm ci

      - name: Build JWT package
        working-directory: ./packages/jwt
        run: npm run build || npx tsc

      - name: Build application with package files (skip env copy)
        working-directory: ./apps/backend/services/account-service
        run: npm run build && npm run copy-package

      - name: Validate required secrets
        run: |
          if [ -z "$EC2_HOST" ]; then
            echo "Error: EC2_HOST secret is empty or not accessible"
            echo "Available environment variables:"
            env | grep -E "(GITHUB|RUNNER)" | head -10
            exit 1
          fi
          if [ -z "$EC2_USERNAME" ]; then
            echo "Error: EC2_USERNAME secret is empty or not accessible"
            exit 1
          fi
          if [ -z "$EC2_SSH_KEY" ]; then
            echo "Error: EC2_SSH_KEY secret is empty or not accessible"
            exit 1
          fi
          echo "All required secrets are accessible"
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        env:
          HOST: ${{ secrets.EC2_HOST }}
          USERNAME: ${{ secrets.EC2_USERNAME }}
          KEY: ${{ secrets.EC2_SSH_KEY }}
        with:
          host: ${{ env.HOST }}
          username: ${{ env.USERNAME }}
          key: ${{ env.KEY }}
          port: 22
          timeout: 60s
          command_timeout: 10m
          script: |
            # Check current directory and setup
            echo "Current directory: $(pwd)"
            echo "User: $(whoami)"

            # Navigate to app directory
            cd ~/grid-wars-account-service

            # Check if we're already in the right place (compiled app directory)
            if [ -f "main.js" ] && [ -f "package.json" ]; then
              echo "Found compiled application in current directory"
              
              # Stop existing PM2 process (if running)
              npx pm2 stop grid-wars-account-service || true
              npx pm2 delete grid-wars-account-service || true
              
              # Update environment file
              echo "DB_HOST=${{ secrets.DB_HOST }}" > .env
              echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
              echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
              echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
              echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
              echo "DB_SYNCHRONIZE=false" >> .env
              echo "NODE_ENV=production" >> .env
              echo "PORT=3001" >> .env
              echo "ACCESS_TOKEN_SECURITY_KEY=${{ secrets.ACCESS_TOKEN_SECURITY_KEY }}" >> .env
              echo "ACCESS_TOKEN_SECRET=${{ secrets.ACCESS_TOKEN_SECRET }}" >> .env
              echo "ACCESS_TOKEN_EXPIRATION=7d" >> .env
              
              # Install PM2 if not exists
              if ! command -v pm2 &> /dev/null && ! command -v npx pm2 &> /dev/null; then
                npm install pm2
              fi
              
              # Start the application with PM2
              npx pm2 start main.js --name "grid-wars-account-service"
              
              # Save PM2 configuration
              npx pm2 save
              
              # Setup PM2 to start on system boot
              npx pm2 startup || true
              
            else
              echo "Application files not found in expected location"
              echo "Current directory contents:"
              ls -la
              echo "Looking for application files..."
              find . -name "main.js" -type f
              exit 1
            fi

            # Show PM2 status
            npx pm2 list

            # Wait a moment for the app to start
            sleep 5

            # Health check
            curl -f http://localhost:3001/health || echo "Health check failed, but deployment completed"
